process {   
  cpus = { 1 * task.attempt }
  memory = { 6.GB * task.attempt }
  time = { 4.h * task.attempt }

  errorStrategy = { task.attempt <= 2 ? "retry" : "ignore" }   
  maxRetries = 2 
  // Base configuration for the processes 
  withLabel: small{
    cpus =  {
      def baseCpu = 1
      if (params.max_cpus){
        baseCpu.compareTo(params.max_cpus as int) == 1 ? params.max_cpus : baseMem
      } else {
        baseCpu
      }
    }
    memory = {
      def baseMem = 4.GB * task.attempt
      if (params.max_memory){
        baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
      } else {
        baseMem
      }
    }
    time = {
      baseTime = 6.h * task.attempt
      if (params.max_time){
        baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
      } else {
        baseTime
      }
    }
  }
  withLabel: medium{
    cpus =  {
      def baseCpu = 1
      if (params.max_cpus){
        baseCpu.compareTo(params.max_cpus as int) == 1 ? params.max_cpus : baseMem
      } else {
        baseCpu
      }
    }
    memory = {
      def baseMem = 7.GB * task.attempt
      if (params.max_memory){
        baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
      } else {
        baseMem
      }
    }
    time = {
      baseTime = 12.h * task.attempt
      if (params.max_time){
        baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
      } else {
        baseTime
      }
    }
  }
  withLabel: large{
    cpus =  {
      def baseCpu = 1
      if (params.max_cpus){
        baseCpu.compareTo(params.max_cpus as int) == 1 ? params.max_cpus : baseMem
      } else {
        baseCpu
      }
    }
    memory = {
      def baseMem = 12.GB * task.attempt
      if (params.max_memory){
        baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
      } else {
        baseMem
      }
    }
    time = {
      baseTime = 23.h * task.attempt
      if (params.max_time){
        baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
      } else {
        baseTime
      }
    }
  }
  withLabel: small_multi{
    cpus =  {
      def baseCpu = 2 * task.attempt
      if (params.max_cpus){
        baseCpu.compareTo(params.max_cpus as int) == 1 ? params.max_cpus : baseMem
      } else {
        baseCpu
      }
    }
    memory = {
      def baseMem = 8.GB * task.attempt
      if (params.max_memory){
        baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
      } else {
        baseMem
      }
    }
    time = {
      baseTime = 4.h * task.attempt
      if (params.max_time){
        baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
      } else {
        baseTime
      }
    }
  }
  withLabel: gsalign{
    cpus =  {
      def baseCpu = parasm.gsalign_threads * task.attempt
      if (params.max_cpus){
        baseCpu.compareTo(params.max_cpus as int) == 1 ? params.max_cpus : baseMem
      } else {
        baseCpu
      }
    }
    memory = {
      def baseMem = 6.GB * task.attempt
      if (params.max_memory){
        baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
      } else {
        baseMem
      }
    }
    time = {
      baseTime = 12.h * task.attempt
      if (params.max_time){
        baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
      } else {
        baseTime
      }
    }
  }
  withLabel: minimap2{
    cpus =  {
      def baseCpu = parasm.minimap2_threads * task.attempt
      if (params.max_cpus){
        baseCpu.compareTo(params.max_cpus as int) == 1 ? params.max_cpus : baseMem
      } else {
        baseCpu
      }
    }
    memory = {
      def baseMem = 8.GB * task.attempt
      if (params.max_memory){
        baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
      } else {
        baseMem
      }
    }
    time = {
      baseTime = 12.h * task.attempt
      if (params.max_time){
        baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
      } else {
        baseTime
      }
    }
  }
}
