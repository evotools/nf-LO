/*
 * ------------------------------------------------------
 *  Based on the nf-core/rnaseq Nextflow base config file
 * ------------------------------------------------------
 */

// Include parameters from configuration file
// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

params {
    source = null
    target = null
    ncbi_source = false
    ncbi_target = false
    igenomes_source = false
    igenomes_target = false
    distance = 'medium'
    aligner = 'lastz'
    srcSize = 20000000
    tgtSize = 10000000
    tgtOvlp = 100000
    srcOvlp = 0
    qscores = null
    outdir = "${launchDir}/OUTPUTS" 
    annotation = null
    annotation_format = null
    custom = null
    chainCustom = null
    chain_name = 'liftover'
    liftover_algorithm = 'liftover'
    maf_tgt_name = 'tgt'
    igenomes_base = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore = false  
    no_maf = false
    no_netsynt = false
    mafTools = null
    reciprocal_best = false
    mm2_full_alignment = false
    mm2_lowmem = false
    minimap2_threads = 2
    gsalign_threads = 2
    max_memory = (Runtime.runtime.maxMemory() as nextflow.util.MemoryUnit).toGiga().GB
    max_cpus = Runtime.runtime.availableProcessors() == 1 ? 1 : Runtime.runtime.availableProcessors() - 1
    max_time = '240.h'
    help = false
    mamba = false
    publish_dir_mode = 'copy'
    extra_cluster_options = null
    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    my_config = null
}


try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}


profiles {
  standard {
    process.executor = 'local'
    executor.queueSize = Runtime.runtime.availableProcessors() == 1 ? 1 : Runtime.runtime.availableProcessors() - 1
    executor.submitRateLimit = '4sec'
  }
  verysmall {
    includeConfig 'conf/verysmall.config'
    process.executor = 'local'
    executor.queueSize = Runtime.runtime.availableProcessors() == 1 ? 1 : Runtime.runtime.availableProcessors() - 1
    executor.submitRateLimit = '4sec'
  }
  local {
    process.executor = 'local'
    executor.queueSize = Runtime.runtime.availableProcessors() == 1 ? 1 : Runtime.runtime.availableProcessors() - 1
    executor.submitRateLimit = '4sec'
  }
  eddie {
    includeConfig 'conf/eddie.config'
    singularity.enabled = true
    singularity.autoMounts = true 
  }   
  eddie_conda {
    conda.enabled          = true
    includeConfig 'conf/eddie_conda.config'
    process.conda = "$projectDir/environment.yml" 
    conda.createTimeout = '8 h'
    conda.useMamba = params.mamba ? true : false
  }
  conda {
    conda.enabled          = true
    params.enable_conda    = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    conda.createTimeout = '8 h'
    includeConfig 'conf/conda.config'
    conda.useMamba = params.mamba ? true : false
  }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  podman {
    podman.enabled         = true
    docker.enabled         = false
    singularity.enabled    = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  shifter {
    shifter.enabled        = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    charliecloud.enabled   = false
  }
  charliecloud {
    charliecloud.enabled   = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
  }
  uge {
    process.executor = 'sge'
  }   
  sge {
    process.executor = 'sge'
  }
  slurm {
    process.executor = 'slurm'
  }
  test {
    includeConfig 'conf/test.config'
  }
  custom_profile {
    includeConfig "${params.my_config}"
  }
}

// import igenome configuration
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}


// Add reporting configuration
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/reports/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/reports/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/reports/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/reports/pipeline_dag_${trace_timestamp}.html"
}

manifest {
  name            = 'evotools/nf-LO'
  author          = 'Andrea Talenti'
  homePage        = 'https://github.com/evotools/nf-LO'
  description     = 'Nextflow lift over pipeline.'
  mainScript      = 'main.nf'
  nextflowVersion = '>=21.10.0'
  defaultBranch   = 'main'
  version         = '1.8.2'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
